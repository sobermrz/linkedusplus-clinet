{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/mern-workspace/linkedUsV1/client/src/components/chat/Chat.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport webSocket from 'socket.io-client';\n\nconst Chat = () => {\n  const [ws, setWs] = useState(null);\n\n  const connectWebSocket = () => {\n    //開啟\n    setWs(webSocket('http://localhost:3000'));\n  };\n\n  useEffect(() => {\n    if (ws) {\n      //連線成功在 console 中打印訊息\n      console.log('success connect!'); //設定監聽\n\n      initWebSocket();\n    }\n  }, [ws]);\n\n  const initWebSocket = () => {\n    //對 getMessage 設定監聽，如果 server 有透過 getMessage 傳送訊息，將會在此被捕捉\n    ws.on('getMessage', message => {\n      console.log(message);\n    });\n  };\n\n  const sendMessage = () => {\n    //以 emit 送訊息，並以 getMessage 為名稱送給 server 捕捉\n    ws.emit('getMessage', '只回傳給發送訊息的 client');\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }, \"Chat App\");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/andrew/mern-workspace/linkedUsV1/client/src/components/chat/Chat.js"],"names":["React","Fragment","useEffect","PropTypes","Link","connect","Spinner","webSocket","Chat","ws","setWs","useState","connectWebSocket","console","log","initWebSocket","on","message","sendMessage","emit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcC,QAAQ,CAAC,IAAD,CAA5B;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B;AACAF,IAAAA,KAAK,CAACH,SAAS,CAAC,uBAAD,CAAV,CAAL;AACD,GAHD;;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,EAAJ,EAAQ;AACN;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAFM,CAGN;;AACAC,MAAAA,aAAa;AACd;AACF,GAPQ,EAON,CAACN,EAAD,CAPM,CAAT;;AASA,QAAMM,aAAa,GAAG,MAAM;AAC1B;AACAN,IAAAA,EAAE,CAACO,EAAH,CAAM,YAAN,EAAqBC,OAAD,IAAa;AAC/BJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACD,KAFD;AAGD,GALD;;AAOA,QAAMC,WAAW,GAAG,MAAM;AACxB;AACAT,IAAAA,EAAE,CAACU,IAAH,CAAQ,YAAR,EAAsB,kBAAtB;AACD,GAHD;;AAKA,sBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,CA9BD;;AAgCA,eAAeX,IAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport webSocket from 'socket.io-client';\n\nconst Chat = () => {\n  const [ws, setWs] = useState(null);\n\n  const connectWebSocket = () => {\n    //開啟\n    setWs(webSocket('http://localhost:3000'));\n  };\n\n  useEffect(() => {\n    if (ws) {\n      //連線成功在 console 中打印訊息\n      console.log('success connect!');\n      //設定監聽\n      initWebSocket();\n    }\n  }, [ws]);\n\n  const initWebSocket = () => {\n    //對 getMessage 設定監聽，如果 server 有透過 getMessage 傳送訊息，將會在此被捕捉\n    ws.on('getMessage', (message) => {\n      console.log(message);\n    });\n  };\n\n  const sendMessage = () => {\n    //以 emit 送訊息，並以 getMessage 為名稱送給 server 捕捉\n    ws.emit('getMessage', '只回傳給發送訊息的 client');\n  };\n\n  return <Fragment>Chat App</Fragment>;\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}