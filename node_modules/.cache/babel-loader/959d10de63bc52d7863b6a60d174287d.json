{"ast":null,"code":"import webSocket from 'socket.io-client';\nimport axios from 'axios';\nimport { CONNECT_WEBSOCKET, DISCONNECT_WEBSOCKET, UPDATE_MESSAGE, SET_TALKER, UPDATE_ALL_MSG_DATA } from './types';\nimport store from '../store';\nexport const connectWebSocket = userId => async dispatch => {\n  try {\n    let socketId = '';\n    const socket = await webSocket('http://localhost:5000');\n    console.log('waiting for the message...');\n    socket.on('connect', () => {\n      socketId = socket.id; //Send User ID and user webSocket ID\n      //之後這裡可以加入toekn，讓server進行驗證，見證通過才讓他進行通訊\n\n      socket.emit('user_login', {\n        userId,\n        socketId\n      });\n    });\n    await dispatch(getAllMsgData());\n    socket.on('getMessage', data => {\n      console.log('From: ', data.from, 'Msg: ', data.msg);\n      const state = store.getState();\n      const nowTalkingTo = state.chat.nowTalkingTo;\n      const allMsgData = new Map(state.chat.allMsgData); //需要nowTalkingTo，判斷是否等於from，等於就要同時更新msaData和allMsgData\n\n      if (data.from === nowTalkingTo) {\n        dispatch({\n          type: UPDATE_MESSAGE,\n          payload: Object.assign({}, data)\n        });\n      } //將msgData添加到對應id的allMsgData\n\n\n      if (allMsgData.get(data.from)) {\n        allMsgData.get(data.from).push(Object.assign({}, data));\n      } else {\n        allMsgData.set(data.from, [Object.assign({}, data)]);\n      }\n\n      dispatch({\n        type: UPDATE_ALL_MSG_DATA,\n        payload: allMsgData\n      });\n    }); //TO DO: 像server 獲取所有連天紀錄，並綁定到allMsgData\n\n    dispatch({\n      type: CONNECT_WEBSOCKET,\n      payload: socket\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const sendMessage = (socket, data) => async dispatch => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data)\n    });\n    const state = store.getState();\n    const nowTalkingTo = state.chat.nowTalkingTo;\n    const allMsgData = new Map(state.chat.allMsgData);\n\n    if (allMsgData.get(nowTalkingTo)) {\n      allMsgData.get(nowTalkingTo).push(Object.assign({}, data));\n    } else {\n      allMsgData.set(nowTalkingTo, [Object.assign({}, data)]);\n    }\n\n    dispatch({\n      type: UPDATE_ALL_MSG_DATA,\n      payload: allMsgData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //設定要連天的對象，去allMsgData裡拿出對應user id 的聊天資料，並將此資料設定為msgData\n\nexport const setTalker = (userId, allMsgData) => async dispatch => {\n  const msgData = allMsgData && allMsgData.get(userId) ? allMsgData.get(userId) : [];\n  dispatch({\n    type: SET_TALKER,\n    payload: {\n      msgData,\n      userId\n    }\n  });\n}; //Get All History Msg Data\n\nexport const getAllMsgData = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/users/msg');\n    console.log(res.data.allMsgData);\n    let obj = res.data.allMsgData;\n    let allMsgData = new Map(); //Transform object to Map\n\n    for (let k of Object.keys(obj)) {\n      allMsgData.set(k, obj[k]);\n    }\n\n    dispatch({\n      type: UPDATE_ALL_MSG_DATA,\n      payload: allMsgData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //Disconnect\n\nexport const disconnectWebSocket = () => async dispatch => {\n  const state = store.getState();\n  const socket = state.chat.socket;\n  if (socket) socket.disconnect();\n  dispatch({\n    type: DISCONNECT_WEBSOCKET,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["/Users/andrew/mern-workspace/linkedUs/client/src/actions/chat.js"],"names":["webSocket","axios","CONNECT_WEBSOCKET","DISCONNECT_WEBSOCKET","UPDATE_MESSAGE","SET_TALKER","UPDATE_ALL_MSG_DATA","store","connectWebSocket","userId","dispatch","socketId","socket","console","log","on","id","emit","getAllMsgData","data","from","msg","state","getState","nowTalkingTo","chat","allMsgData","Map","type","payload","Object","assign","get","push","set","error","sendMessage","setTalker","msgData","res","obj","k","keys","disconnectWebSocket","disconnect"],"mappings":"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","sourcesContent":["import webSocket from 'socket.io-client';\nimport axios from 'axios';\nimport {\n  CONNECT_WEBSOCKET,\n  DISCONNECT_WEBSOCKET,\n  UPDATE_MESSAGE,\n  SET_TALKER,\n  UPDATE_ALL_MSG_DATA,\n} from './types';\nimport store from '../store';\nexport const connectWebSocket = (userId) => async (dispatch) => {\n  try {\n    let socketId = '';\n    const socket = await webSocket('http://localhost:5000');\n\n    console.log('waiting for the message...');\n\n    socket.on('connect', () => {\n      socketId = socket.id;\n      //Send User ID and user webSocket ID\n      //之後這裡可以加入toekn，讓server進行驗證，見證通過才讓他進行通訊\n      socket.emit('user_login', {\n        userId,\n        socketId,\n      });\n    });\n\n    await dispatch(getAllMsgData());\n\n    socket.on('getMessage', (data) => {\n      console.log('From: ', data.from, 'Msg: ', data.msg);\n      const state = store.getState();\n      const nowTalkingTo = state.chat.nowTalkingTo;\n      const allMsgData = new Map(state.chat.allMsgData);\n      //需要nowTalkingTo，判斷是否等於from，等於就要同時更新msaData和allMsgData\n\n      if (data.from === nowTalkingTo) {\n        dispatch({\n          type: UPDATE_MESSAGE,\n          payload: Object.assign({}, data),\n        });\n      }\n\n      //將msgData添加到對應id的allMsgData\n      if (allMsgData.get(data.from)) {\n        allMsgData.get(data.from).push(Object.assign({}, data));\n      } else {\n        allMsgData.set(data.from, [Object.assign({}, data)]);\n      }\n\n      dispatch({\n        type: UPDATE_ALL_MSG_DATA,\n        payload: allMsgData,\n      });\n    });\n\n    //TO DO: 像server 獲取所有連天紀錄，並綁定到allMsgData\n\n    dispatch({ type: CONNECT_WEBSOCKET, payload: socket });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const sendMessage = (socket, data) => async (dispatch) => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data),\n    });\n    const state = store.getState();\n    const nowTalkingTo = state.chat.nowTalkingTo;\n    const allMsgData = new Map(state.chat.allMsgData);\n\n    if (allMsgData.get(nowTalkingTo)) {\n      allMsgData.get(nowTalkingTo).push(Object.assign({}, data));\n    } else {\n      allMsgData.set(nowTalkingTo, [Object.assign({}, data)]);\n    }\n    dispatch({\n      type: UPDATE_ALL_MSG_DATA,\n      payload: allMsgData,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//設定要連天的對象，去allMsgData裡拿出對應user id 的聊天資料，並將此資料設定為msgData\nexport const setTalker = (userId, allMsgData) => async (dispatch) => {\n  const msgData =\n    allMsgData && allMsgData.get(userId) ? allMsgData.get(userId) : [];\n\n  dispatch({\n    type: SET_TALKER,\n    payload: { msgData, userId },\n  });\n};\n\n//Get All History Msg Data\nexport const getAllMsgData = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/users/msg');\n    console.log(res.data.allMsgData);\n    let obj = res.data.allMsgData;\n\n    let allMsgData = new Map();\n    //Transform object to Map\n    for (let k of Object.keys(obj)) {\n      allMsgData.set(k, obj[k]);\n    }\n    dispatch({\n      type: UPDATE_ALL_MSG_DATA,\n      payload: allMsgData,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Disconnect\nexport const disconnectWebSocket = () => async (dispatch) => {\n  const state = store.getState();\n  const socket = state.chat.socket;\n  if (socket) socket.disconnect();\n\n  dispatch({\n    type: DISCONNECT_WEBSOCKET,\n    payload: {},\n  });\n};\n"]},"metadata":{},"sourceType":"module"}