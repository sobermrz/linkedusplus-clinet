{"ast":null,"code":"import webSocket, { Socket } from 'socket.io-client';\nimport { CONNECT_WEBSOCKET, UPDATE_MESSAGE, SET_TALKER } from './types';\nexport const connectWebSocket = userId => async dispatch => {\n  try {\n    let socketId = '';\n    const ws = await webSocket('http://localhost:8888');\n    console.log('waiting for the message...');\n    ws.on('connect', () => {\n      socketId = ws.id;\n      console.log('This is my websokcet objects id: ', ws.id); //Send User ID and user webSocket ID\n\n      ws.emit('user_login', {\n        userId,\n        socketId\n      });\n    }); //進行註冊\n\n    ws.on('getMessage', data => {\n      console.log('From: ', data.from, 'Msg: ', data.msg);\n      dispatch({\n        type: UPDATE_MESSAGE,\n        payload: Object.assign({}, data)\n      });\n    });\n    dispatch({\n      type: CONNECT_WEBSOCKET,\n      payload: ws\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const sendMessage = (socket, data) => async dispatch => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data)\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const setTalker = (friendId, allMsgData) => async dispatch => {\n  const msgData = allMsgData.get(friendId) !== null ? allMsgData.get(friendId) : [];\n  dispatch({\n    type: SET_TALKER,\n    payload: msgData\n  });\n};","map":{"version":3,"sources":["/Users/andrew/mern-workspace/linkedUsV1/client/src/actions/chat.js"],"names":["webSocket","Socket","CONNECT_WEBSOCKET","UPDATE_MESSAGE","SET_TALKER","connectWebSocket","userId","dispatch","socketId","ws","console","log","on","id","emit","data","from","msg","type","payload","Object","assign","error","sendMessage","socket","setTalker","friendId","allMsgData","msgData","get"],"mappings":"AAAA,OAAOA,SAAP,IAAoBC,MAApB,QAAkC,kBAAlC;AACA,SAASC,iBAAT,EAA4BC,cAA5B,EAA4CC,UAA5C,QAA8D,SAA9D;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC9D,MAAI;AACF,QAAIC,QAAQ,GAAG,EAAf;AACA,UAAMC,EAAE,GAAG,MAAMT,SAAS,CAAC,uBAAD,CAA1B;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAEAF,IAAAA,EAAE,CAACG,EAAH,CAAM,SAAN,EAAiB,MAAM;AACrBJ,MAAAA,QAAQ,GAAGC,EAAE,CAACI,EAAd;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,EAAE,CAACI,EAApD,EAFqB,CAGrB;;AACAJ,MAAAA,EAAE,CAACK,IAAH,CAAQ,YAAR,EAAsB;AACpBR,QAAAA,MADoB;AAEpBE,QAAAA;AAFoB,OAAtB;AAID,KARD,EANE,CAgBF;;AACAC,IAAAA,EAAE,CAACG,EAAH,CAAM,YAAN,EAAqBG,IAAD,IAAU;AAC5BL,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBI,IAAI,CAACC,IAA3B,EAAiC,OAAjC,EAA0CD,IAAI,CAACE,GAA/C;AACAV,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEf,cADC;AAEPgB,QAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB;AAFF,OAAD,CAAR;AAID,KAND;AAQAR,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEhB,iBAAR;AAA2BiB,MAAAA,OAAO,EAAEV;AAApC,KAAD,CAAR;AACD,GA1BD,CA0BE,OAAOa,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF,CA9BM;AAgCP,OAAO,MAAMC,WAAW,GAAG,CAACC,MAAD,EAAST,IAAT,KAAkB,MAAOR,QAAP,IAAoB;AAC/D,MAAI;AACFiB,IAAAA,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACV,IAAP,CAAY,YAAZ,EAA0BC,IAA1B,CAAlB;AACAR,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEf,cADC;AAEPgB,MAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOO,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMG,SAAS,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B,MAAOpB,QAAP,IAAoB;AACrE,QAAMqB,OAAO,GACXD,UAAU,CAACE,GAAX,CAAeH,QAAf,MAA6B,IAA7B,GAAoCC,UAAU,CAACE,GAAX,CAAeH,QAAf,CAApC,GAA+D,EADjE;AAGAnB,EAAAA,QAAQ,CAAC;AACPW,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAES;AAFF,GAAD,CAAR;AAID,CARM","sourcesContent":["import webSocket, { Socket } from 'socket.io-client';\nimport { CONNECT_WEBSOCKET, UPDATE_MESSAGE, SET_TALKER } from './types';\n\nexport const connectWebSocket = (userId) => async (dispatch) => {\n  try {\n    let socketId = '';\n    const ws = await webSocket('http://localhost:8888');\n\n    console.log('waiting for the message...');\n\n    ws.on('connect', () => {\n      socketId = ws.id;\n      console.log('This is my websokcet objects id: ', ws.id);\n      //Send User ID and user webSocket ID\n      ws.emit('user_login', {\n        userId,\n        socketId,\n      });\n    });\n\n    //進行註冊\n    ws.on('getMessage', (data) => {\n      console.log('From: ', data.from, 'Msg: ', data.msg);\n      dispatch({\n        type: UPDATE_MESSAGE,\n        payload: Object.assign({}, data),\n      });\n    });\n\n    dispatch({ type: CONNECT_WEBSOCKET, payload: ws });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const sendMessage = (socket, data) => async (dispatch) => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data),\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const setTalker = (friendId, allMsgData) => async (dispatch) => {\n  const msgData =\n    allMsgData.get(friendId) !== null ? allMsgData.get(friendId) : [];\n\n  dispatch({\n    type: SET_TALKER,\n    payload: msgData,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}