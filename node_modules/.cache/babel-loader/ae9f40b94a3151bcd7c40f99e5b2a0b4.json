{"ast":null,"code":"import webSocket from 'socket.io-client';\nimport axios from 'axios';\nimport { CONNECT_WEBSOCKET, DISCONNECT_WEBSOCKET, UPDATE_MESSAGE, SET_TALKER, UPDATE_ALL_MSG_DATA } from './types';\nimport store from '../store';\nvar webSocketURL = 'http://localhost:8088';\nexport const setWebSocketURL = url => {\n  webSocketURL = url;\n};\nexport const connectWebSocket = userId => async dispatch => {\n  try {\n    let socketId = '';\n    const socket = await webSocket(webSocketURL);\n    console.log('waiting for the message...');\n    socket.on('connect', () => {\n      socketId = socket.id; //Send User ID and user webSocket ID\n      //之後這裡可以加入toekn，讓server進行驗證，見證通過才讓他進行通訊\n\n      socket.emit('user_login', {\n        userId,\n        socketId\n      });\n      console.log('clinet regist to the server');\n    });\n    await dispatch(getAllMsgData());\n    socket.on('getMessage', data => {\n      console.log('From: ', data.from, 'Msg: ', data.msg);\n      const state = store.getState();\n      const nowTalkingTo = state.chat.nowTalkingTo;\n      const allMsgData = new Map(state.chat.allMsgData); //需要nowTalkingTo，判斷是否等於from，等於就要同時更新msaData和allMsgData\n\n      if (data.from === nowTalkingTo) {\n        dispatch({\n          type: UPDATE_MESSAGE,\n          payload: Object.assign({}, data)\n        });\n      } //將msgData添加到對應id的allMsgData\n\n\n      if (allMsgData.get(data.from)) {\n        allMsgData.get(data.from).push(Object.assign({}, data));\n      } else {\n        allMsgData.set(data.from, [Object.assign({}, data)]);\n      }\n\n      dispatch({\n        type: UPDATE_ALL_MSG_DATA,\n        payload: allMsgData\n      });\n    }); //TO DO: 像server 獲取所有連天紀錄，並綁定到allMsgData\n\n    dispatch({\n      type: CONNECT_WEBSOCKET,\n      payload: socket\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const sendMessage = (socket, data) => async dispatch => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data)\n    });\n    const state = store.getState();\n    const nowTalkingTo = state.chat.nowTalkingTo;\n    const allMsgData = new Map(state.chat.allMsgData);\n\n    if (allMsgData.get(nowTalkingTo)) {\n      allMsgData.get(nowTalkingTo).push(Object.assign({}, data));\n    } else {\n      allMsgData.set(nowTalkingTo, [Object.assign({}, data)]);\n    }\n\n    dispatch({\n      type: UPDATE_ALL_MSG_DATA,\n      payload: allMsgData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //設定要連天的對象，去allMsgData裡拿出對應user id 的聊天資料，並將此資料設定為msgData\n\nexport const setTalker = (userId, allMsgData) => async dispatch => {\n  const msgData = allMsgData && allMsgData.get(userId) ? allMsgData.get(userId) : [];\n  dispatch({\n    type: SET_TALKER,\n    payload: {\n      msgData,\n      userId\n    }\n  });\n}; //Get All History Msg Data\n\nexport const getAllMsgData = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/users/msg');\n    console.log(res.data.allMsgData);\n    let obj = res.data.allMsgData;\n    let allMsgData = new Map(); //Transform object to Map\n\n    for (let k of Object.keys(obj)) {\n      allMsgData.set(k, obj[k]);\n    }\n\n    dispatch({\n      type: UPDATE_ALL_MSG_DATA,\n      payload: allMsgData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //Disconnect\n\nexport const disconnectWebSocket = () => async dispatch => {\n  const state = store.getState();\n  const socket = state.chat.socket;\n  if (socket) socket.disconnect();\n  dispatch({\n    type: DISCONNECT_WEBSOCKET,\n    payload: {}\n  });\n};","map":{"version":3,"sources":["/Users/andrew/Documents/NEU/CSYE7220-DevOps/hw/linkedUsPlus/linkedUsPlus-client/src/actions/chat.js"],"names":["webSocket","axios","CONNECT_WEBSOCKET","DISCONNECT_WEBSOCKET","UPDATE_MESSAGE","SET_TALKER","UPDATE_ALL_MSG_DATA","store","webSocketURL","setWebSocketURL","url","connectWebSocket","userId","dispatch","socketId","socket","console","log","on","id","emit","getAllMsgData","data","from","msg","state","getState","nowTalkingTo","chat","allMsgData","Map","type","payload","Object","assign","get","push","set","error","sendMessage","setTalker","msgData","res","obj","k","keys","disconnectWebSocket","disconnect"],"mappings":"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","sourcesContent":["import webSocket from 'socket.io-client';\nimport axios from 'axios';\nimport {\n    CONNECT_WEBSOCKET,\n    DISCONNECT_WEBSOCKET,\n    UPDATE_MESSAGE,\n    SET_TALKER,\n    UPDATE_ALL_MSG_DATA\n} from './types';\nimport store from '../store';\nvar webSocketURL = 'http://localhost:8088';\nexport const setWebSocketURL = url => {\n    webSocketURL = url;\n};\n\nexport const connectWebSocket = userId => async dispatch => {\n    try {\n        let socketId = '';\n        const socket = await webSocket(webSocketURL);\n\n        console.log('waiting for the message...');\n\n        socket.on('connect', () => {\n            socketId = socket.id;\n            //Send User ID and user webSocket ID\n            //之後這裡可以加入toekn，讓server進行驗證，見證通過才讓他進行通訊\n            socket.emit('user_login', {\n                userId,\n                socketId\n            });\n            console.log('clinet regist to the server');\n        });\n\n        await dispatch(getAllMsgData());\n\n        socket.on('getMessage', data => {\n            console.log('From: ', data.from, 'Msg: ', data.msg);\n            const state = store.getState();\n            const nowTalkingTo = state.chat.nowTalkingTo;\n            const allMsgData = new Map(state.chat.allMsgData);\n            //需要nowTalkingTo，判斷是否等於from，等於就要同時更新msaData和allMsgData\n\n            if (data.from === nowTalkingTo) {\n                dispatch({\n                    type: UPDATE_MESSAGE,\n                    payload: Object.assign({}, data)\n                });\n            }\n\n            //將msgData添加到對應id的allMsgData\n            if (allMsgData.get(data.from)) {\n                allMsgData.get(data.from).push(Object.assign({}, data));\n            } else {\n                allMsgData.set(data.from, [Object.assign({}, data)]);\n            }\n\n            dispatch({\n                type: UPDATE_ALL_MSG_DATA,\n                payload: allMsgData\n            });\n        });\n\n        //TO DO: 像server 獲取所有連天紀錄，並綁定到allMsgData\n\n        dispatch({ type: CONNECT_WEBSOCKET, payload: socket });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const sendMessage = (socket, data) => async dispatch => {\n    try {\n        socket != null && socket.emit('getMessage', data);\n        dispatch({\n            type: UPDATE_MESSAGE,\n            payload: Object.assign({}, data)\n        });\n        const state = store.getState();\n        const nowTalkingTo = state.chat.nowTalkingTo;\n        const allMsgData = new Map(state.chat.allMsgData);\n\n        if (allMsgData.get(nowTalkingTo)) {\n            allMsgData.get(nowTalkingTo).push(Object.assign({}, data));\n        } else {\n            allMsgData.set(nowTalkingTo, [Object.assign({}, data)]);\n        }\n        dispatch({\n            type: UPDATE_ALL_MSG_DATA,\n            payload: allMsgData\n        });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n//設定要連天的對象，去allMsgData裡拿出對應user id 的聊天資料，並將此資料設定為msgData\nexport const setTalker = (userId, allMsgData) => async dispatch => {\n    const msgData =\n        allMsgData && allMsgData.get(userId) ? allMsgData.get(userId) : [];\n\n    dispatch({\n        type: SET_TALKER,\n        payload: { msgData, userId }\n    });\n};\n\n//Get All History Msg Data\nexport const getAllMsgData = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/users/msg');\n        console.log(res.data.allMsgData);\n        let obj = res.data.allMsgData;\n\n        let allMsgData = new Map();\n        //Transform object to Map\n        for (let k of Object.keys(obj)) {\n            allMsgData.set(k, obj[k]);\n        }\n        dispatch({\n            type: UPDATE_ALL_MSG_DATA,\n            payload: allMsgData\n        });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n//Disconnect\nexport const disconnectWebSocket = () => async dispatch => {\n    const state = store.getState();\n    const socket = state.chat.socket;\n    if (socket) socket.disconnect();\n\n    dispatch({\n        type: DISCONNECT_WEBSOCKET,\n        payload: {}\n    });\n};\n"]},"metadata":{},"sourceType":"module"}