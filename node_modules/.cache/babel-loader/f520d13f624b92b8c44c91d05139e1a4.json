{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from './types'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await api.put(`/posts/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await api.put(`/posts/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.delete(`/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const res = await api.post('/posts', formData);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await api.get(`/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const res = await api.post(`/posts/comment/${postId}`, formData);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await api.delete(`/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/andrew/mern-workspace/devconnector/client/src/actions/post.js"],"names":["api","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","axios","get","type","payload","data","err","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete","addPost","formData","post","getPost","addComment","postId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from './types';\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/posts');\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add like\nexport const addLike = (id) => async (dispatch) => {\n  try {\n    const res = await api.put(`/posts/like/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data },\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Remove like\nexport const removeLike = (id) => async (dispatch) => {\n  try {\n    const res = await api.put(`/posts/unlike/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data },\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete post\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.delete(`/posts/${id}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: id,\n    });\n\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add post\nexport const addPost = (formData) => async (dispatch) => {\n  try {\n    const res = await api.post('/posts', formData);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get post\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    const res = await api.get(`/posts/${id}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  try {\n    const res = await api.post(`/posts/comment/${postId}`, formData);\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await api.delete(`/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}