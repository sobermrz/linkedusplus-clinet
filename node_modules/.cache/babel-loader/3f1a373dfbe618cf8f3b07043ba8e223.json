{"ast":null,"code":"import webSocket, { Socket } from 'socket.io-client';\nimport { CONNECT_WEBSOCKET, UPDATE_MESSAGE, SET_TALKER } from './types';\nexport const connectWebSocket = userId => async dispatch => {\n  try {\n    let socketId = '';\n    const ws = await webSocket('http://localhost:8888');\n    console.log('waiting for the message...');\n    ws.on('connect', () => {\n      socketId = ws.id;\n      console.log('This is my websokcet objects id: ', ws.id); //Send User ID and user webSocket ID\n\n      ws.emit('user_login', {\n        userId,\n        socketId\n      });\n    });\n    ws.on('getMessage', data => {\n      console.log('From: ', data.from, 'Msg: ', data.msg); //更新現在聊天對像的msgData\n\n      dispatch({\n        type: UPDATE_MESSAGE,\n        payload: Object.assign({}, data)\n      }); //TO DO: 還要更新allMsgData裡的連天資料\n    });\n    dispatch({\n      type: CONNECT_WEBSOCKET,\n      payload: ws\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const sendMessage = (socket, data) => async dispatch => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data)\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //設定要連天的對象，去allMsgData裡拿出對應user id 的聊天資料，並將此資料設定為msgData\n\nexport const setTalker = (userId, allMsgData) => async dispatch => {\n  var msgData = allMsgData.get(userId) !== null ? allMsgData.get(userId) : [];\n  msgData = [];\n  console.log('-------------msgData is:  ', msgData);\n  dispatch({\n    type: SET_TALKER,\n    payload: {\n      msgData,\n      userId\n    }\n  });\n};","map":{"version":3,"sources":["/Users/andrew/mern-workspace/linkedUsV1/client/src/actions/chat.js"],"names":["webSocket","Socket","CONNECT_WEBSOCKET","UPDATE_MESSAGE","SET_TALKER","connectWebSocket","userId","dispatch","socketId","ws","console","log","on","id","emit","data","from","msg","type","payload","Object","assign","error","sendMessage","socket","setTalker","allMsgData","msgData","get"],"mappings":"AAAA,OAAOA,SAAP,IAAoBC,MAApB,QAAkC,kBAAlC;AACA,SAASC,iBAAT,EAA4BC,cAA5B,EAA4CC,UAA5C,QAA8D,SAA9D;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC9D,MAAI;AACF,QAAIC,QAAQ,GAAG,EAAf;AACA,UAAMC,EAAE,GAAG,MAAMT,SAAS,CAAC,uBAAD,CAA1B;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAEAF,IAAAA,EAAE,CAACG,EAAH,CAAM,SAAN,EAAiB,MAAM;AACrBJ,MAAAA,QAAQ,GAAGC,EAAE,CAACI,EAAd;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,EAAE,CAACI,EAApD,EAFqB,CAGrB;;AACAJ,MAAAA,EAAE,CAACK,IAAH,CAAQ,YAAR,EAAsB;AACpBR,QAAAA,MADoB;AAEpBE,QAAAA;AAFoB,OAAtB;AAID,KARD;AAUAC,IAAAA,EAAE,CAACG,EAAH,CAAM,YAAN,EAAqBG,IAAD,IAAU;AAC5BL,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBI,IAAI,CAACC,IAA3B,EAAiC,OAAjC,EAA0CD,IAAI,CAACE,GAA/C,EAD4B,CAE5B;;AACAV,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEf,cADC;AAEPgB,QAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB;AAFF,OAAD,CAAR,CAH4B,CAQ5B;AACD,KATD;AAWAR,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEhB,iBAAR;AAA2BiB,MAAAA,OAAO,EAAEV;AAApC,KAAD,CAAR;AACD,GA5BD,CA4BE,OAAOa,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF,CAhCM;AAkCP,OAAO,MAAMC,WAAW,GAAG,CAACC,MAAD,EAAST,IAAT,KAAkB,MAAOR,QAAP,IAAoB;AAC/D,MAAI;AACFiB,IAAAA,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACV,IAAP,CAAY,YAAZ,EAA0BC,IAA1B,CAAlB;AACAR,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEf,cADC;AAEPgB,MAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOO,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,MAAMG,SAAS,GAAG,CAACnB,MAAD,EAASoB,UAAT,KAAwB,MAAOnB,QAAP,IAAoB;AACnE,MAAIoB,OAAO,GAAGD,UAAU,CAACE,GAAX,CAAetB,MAAf,MAA2B,IAA3B,GAAkCoB,UAAU,CAACE,GAAX,CAAetB,MAAf,CAAlC,GAA2D,EAAzE;AACAqB,EAAAA,OAAO,GAAG,EAAV;AACAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CgB,OAA1C;AACApB,EAAAA,QAAQ,CAAC;AACPW,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAE;AAAEQ,MAAAA,OAAF;AAAWrB,MAAAA;AAAX;AAFF,GAAD,CAAR;AAID,CARM","sourcesContent":["import webSocket, { Socket } from 'socket.io-client';\nimport { CONNECT_WEBSOCKET, UPDATE_MESSAGE, SET_TALKER } from './types';\n\nexport const connectWebSocket = (userId) => async (dispatch) => {\n  try {\n    let socketId = '';\n    const ws = await webSocket('http://localhost:8888');\n\n    console.log('waiting for the message...');\n\n    ws.on('connect', () => {\n      socketId = ws.id;\n      console.log('This is my websokcet objects id: ', ws.id);\n      //Send User ID and user webSocket ID\n      ws.emit('user_login', {\n        userId,\n        socketId,\n      });\n    });\n\n    ws.on('getMessage', (data) => {\n      console.log('From: ', data.from, 'Msg: ', data.msg);\n      //更新現在聊天對像的msgData\n      dispatch({\n        type: UPDATE_MESSAGE,\n        payload: Object.assign({}, data),\n      });\n\n      //TO DO: 還要更新allMsgData裡的連天資料\n    });\n\n    dispatch({ type: CONNECT_WEBSOCKET, payload: ws });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const sendMessage = (socket, data) => async (dispatch) => {\n  try {\n    socket != null && socket.emit('getMessage', data);\n    dispatch({\n      type: UPDATE_MESSAGE,\n      payload: Object.assign({}, data),\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//設定要連天的對象，去allMsgData裡拿出對應user id 的聊天資料，並將此資料設定為msgData\nexport const setTalker = (userId, allMsgData) => async (dispatch) => {\n  var msgData = allMsgData.get(userId) !== null ? allMsgData.get(userId) : [];\n  msgData = [];\n  console.log('-------------msgData is:  ', msgData);\n  dispatch({\n    type: SET_TALKER,\n    payload: { msgData, userId },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}